name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./task1-java-backend
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run tests
      run: ./mvnw clean test
      env:
        MONGODB_URI: mongodb://admin:password123@localhost:27017/task_management?authSource=admin
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./task3-react-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./task3-react-frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ./task3-react-frontend/build/

  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build backend application
      run: |
        cd task1-java-backend
        ./mvnw clean package -DskipTests
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./task1-java-backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config use-context ${{ secrets.KUBE_CONTEXT }}
    
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl config use-context ${{ secrets.KUBE_CONTEXT }}
        
        # Update image in deployment
        kubectl set image deployment/task-management-app \
          task-management-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          -n task-management
        
        # Wait for rollout to complete
        kubectl rollout status deployment/task-management-app -n task-management --timeout=300s
    
    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        kubectl config use-context ${{ secrets.KUBE_CONTEXT }}
        
        # Get service URL
        SERVICE_URL=$(kubectl get service task-management-service -n task-management -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$SERVICE_URL" ]; then
          SERVICE_URL=$(kubectl get service task-management-service -n task-management -o jsonpath='{.spec.clusterIP}')
        fi
        
        # Wait for service to be ready
        sleep 30
        
        # Test health endpoint
        curl -f http://$SERVICE_URL:8080/tasks/health || exit 1
        
        echo "Smoke tests passed!"

  deploy-production:
    needs: [build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config use-context ${{ secrets.KUBE_CONTEXT_PROD }}
    
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        kubectl config use-context ${{ secrets.KUBE_CONTEXT_PROD }}
        
        # Update image in deployment
        kubectl set image deployment/task-management-app \
          task-management-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          -n task-management
        
        # Wait for rollout to complete
        kubectl rollout status deployment/task-management-app -n task-management --timeout=600s
    
    - name: Run production tests
      run: |
        export KUBECONFIG=kubeconfig
        kubectl config use-context ${{ secrets.KUBE_CONTEXT_PROD }}
        
        # Get service URL
        SERVICE_URL=$(kubectl get service task-management-service -n task-management -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$SERVICE_URL" ]; then
          SERVICE_URL=$(kubectl get service task-management-service -n task-management -o jsonpath='{.spec.clusterIP}')
        fi
        
        # Wait for service to be ready
        sleep 60
        
        # Test health endpoint
        curl -f http://$SERVICE_URL:8080/tasks/health || exit 1
        
        # Test API endpoints
        curl -f http://$SERVICE_URL:8080/tasks || exit 1
        
        echo "Production deployment successful!"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
